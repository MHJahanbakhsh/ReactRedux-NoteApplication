{"version":3,"sources":["actions/notes.js","history.js","actions/index.js","components/todos/NoteForm.js","components/todos/NoteCreate.js","components/todos/NoteEdit.js","components/Modal.js","components/todos/NoteDelete.js","components/todos/NoteList.js","components/todos/NoteShow.js","components/GoogleAuth.js","components/Header.js","components/App.js","reducers/index.js","index.js"],"names":["axios","create","baseURL","createBrowserHistory","fetchNote","id","dispatch","a","notes","get","response","type","payload","data","NoteForm","props","myOnSubmit","bind","FieldProps","className","htmlFor","label","input","autoComplete","meta","touched","error","role","formValues","this","onSubmit","handleSubmit","Field","name","component","toRender","React","Component","formWrapped","reduxForm","form","validate","errors","title","description","NoteCreate","createOnSubmit","createNote","connect","getState","userId","auth","post","history","push","NoteEdit","editOnSubmit","editNote","match","params","note","initialValues","state","ownProps","patch","MyModal","useState","ReactDOM","createPortal","onClick","Modal","e","stopPropagation","show","Header","Body","content","Footer","to","onDeleteClick","document","getElementById","deleteNote","delete","useEffect","NoteList","style","display","flexDirection","justifyContent","fetchNotes","string","limit","length","substring","Object","values","map","currentUserId","add3Dots","textAlign","notewithThisUSer","isSignedIn","notSignedInMessage","signedInButNoNotes","renderedList","float","console","log","GoogleAuth","onAuthChange","signIn","currentUser","getId","signOut","onsignInClick","onsignOutClick","window","gapi","load","client","init","clientId","scope","then","auth2","getAuthInstance","listen","thingsToRender","App","path","exact","streamList","streamCreate","streamEdit","StreamDelete","streamShow","INITIAL_STATE","combineReducers","action","formReducer","_","mapKeys","omit","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","reactDom","render"],"mappings":"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","file":"static/js/main.0d4ca847.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL:'https://fake-server-for-todoapp.herokuapp.com'\r\n})","import { createBrowserHistory } from 'history'; \r\nexport default createBrowserHistory();\r\n\r\n/*\r\noverall there are 2 approach to programatic navigation:\r\nif we want to use the history-object of the BrowserRouter,this object automatically will \r\npass as component props.so if we want to push into some address we have to address these \r\nprop to action creator\r\nJUST WAHTCH THE VIDEO. I MESSED IT UP!\r\n\r\n*/","import notes from \"./notes\";\r\nimport history from \"../history\";\r\n\r\nexport function signIn(userId){\r\n    return {\r\n        type:'SIGN_IN',\r\n        payload:userId\r\n    }\r\n}\r\n\r\nexport function signOut(){\r\n    return {\r\n        type:'SIGN_OUT'\r\n    }\r\n}\r\n\r\nexport function createNote(formValues){\r\n    return async function(dispatch,getState){\r\n        const {userId} = getState().auth\r\n       const response = await notes.post('/todos',{...formValues,userId});\r\n\r\n       dispatch({type:'CREATE_NOTE',payload:response.data}) //with axios response object contains lots of info that we dont need.the real data is on data attribute\r\n        //after we got our response we want to do some progromatic navigation\r\n        history.push('/')\r\n    }\r\n}\r\n\r\nexport const fetchNotes = () => async dispatch => {\r\n    const response = await notes.get('/todos');\r\n    // console.log(response.data)\r\n    dispatch({ type: 'FETCH_NOTES', payload: response.data });\r\n    \r\n  };\r\n\r\nexport const fetchNote = id => async dispatch => {\r\n    const response = await notes.get(`/todos/${id}`);\r\n  \r\n    dispatch({ type: 'FETCH_NOTE', payload: response.data });\r\n  };\r\n\r\n\r\nexport function editNote(id,formValues){\r\n    return async function(dispatch){\r\n        const response = await notes.patch(`/todos/${id}`,formValues);\r\n\r\n        dispatch({type:'EDIT_NOTE',payload:response.data})\r\n        history.push('/')\r\n    }\r\n\r\n}\r\n\r\nexport function deleteNote(id){\r\n    return async function(dispatch){\r\n        await notes.delete(`/todos/${id}`) //there is no response\r\n        \r\n        dispatch({type:'DELETE_NOTE',payload:id})\r\n        history.push('/')\r\n    }\r\n}","import React from 'react';\r\nimport {Field,reduxForm} from 'redux-form' //Field is a component and reduxForm is essentialy a function(equivelant to 'connect()' function back in react-redux)\r\n//we use Field,anytime we wants to have some kind of input(ex:input,checkbox,radio,dropdown...)\r\n//in automating redux behind the scenes stuff for form,Field is essential and is a must have thing\r\n\r\nclass NoteForm extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.myOnSubmit = this.myOnSubmit.bind(this)\r\n\r\n    }\r\n\r\n    toRender(FieldProps){ //Field would pass bunch of form-related props to its component's function.we use them ro make our elements controlled\r\n        // console.log('props created by Fields: ',FieldProps)\r\n    \r\n       return (<div >\r\n            <label className='form-label' htmlFor={FieldProps.id}>{FieldProps.label}</label>\r\n        <input className='form-control' type=\"text\" id={FieldProps.id} {...FieldProps.input} autoComplete='off'/>\r\n        {FieldProps.meta.touched && FieldProps.meta.error?<div className='alert alert-danger' role=\"alert\">{FieldProps.meta.error}</div>:''}\r\n        <br />\r\n        </div>\r\n        )\r\n    }\r\n\r\n    myOnSubmit(formValues){        //becuase we passed this function to handleSubmit;handleSubmit would do e.preventDefault() for us automatically\r\n        // console.log(this.props) //and also there is no 'event'object in argument anymore; instead formValues is equalls to whatever we typed in input \r\n        this.props.onSubmit(formValues)\r\n    }\r\n    \r\n    \r\n    //handleSubmit is speacial prop function added by redux form\r\n    render(){ //component attr in Field is either a react component or a function for Field to call.this func or comp needs to return some element to show on screen\r\n        return <form className='container' onSubmit={this.props.handleSubmit(this.myOnSubmit)}> \r\n            <Field name='title' component={this.toRender} label='Enter Title' id='field1'/> \r\n            <Field name='description' component={this.toRender} label='Enter Description' id='field2'/> \r\n            <button className='btn btn-primary btn-lg'>Submit</button>\r\n        </form> \r\n    }//whenever we pass a prop to Field component that its has no idea what to do with,it'll pass this to 'component' attr as props which itself is a funcction or component \r\n\r\n    // componentDidMount(){\r\n    //     console.log('props created by reduxForm: ',this.props)\r\n    // }\r\n\r\n}\r\n\r\n/*what essentially happens with validating redux form is:it looks at errors obj keys,in this case 'title' and 'description' and add the \r\nvalues of them to the respective Field with the same name;on 'FieldProps.meta.error'  */\r\nfunction validate(formValues){\r\n    const errors = {}; //this object will return as \"Fieldprops.meta.error\" name of this object has to be \"errors\".the important thing is the keys of object should be equal to Field names \r\n\r\n    if(!formValues.title){\r\n        errors.title = 'you must enter a title' \r\n    }\r\n    if(!formValues.description){\r\n        errors.description = 'you must write some description'\r\n    }\r\n    return errors\r\n}\r\n\r\n//unlike connect() reduxForm takes only one argument(an object)\r\n/*becuase reduxForm does all the bts work for us,after wiring it to your\r\ncomponent ,by default it will pass tremendous number of props*/\r\nconst formWrapped =  reduxForm({\r\n    form:'noteForm',\r\n    validate:validate //this is how we wireup our validation .validate is speacial key.ALSO there is another way of validation which each Field has its own specific typeof validation this way called:Field-Level Validation  \r\n})(NoteForm)\r\n\r\nexport default formWrapped //in the case of code re-using streamForm \r\n//does not need to call any action creator.its up to parent component.so we dont need connect function at all!"," //--------------------BEFORE REFACTORING FOR CODE REUSE---------------------\r\n\r\n\r\n// import React from 'react';\r\n// import { connect } from 'react-redux';\r\n// import {Field,reduxForm} from 'redux-form' //Field is a component and reduxForm is essentialy a function(equivelant to 'connect()' function back in react-redux)\r\n// //we use Field,anytime we wants to have some kind of input(ex:input,checkbox,radio,dropdown...)\r\n// //in automating redux behind the scenes stuff for form,Field is essential and is a must have thing\r\n// import { createStream } from '../../actions';\r\n\r\n// class streamCreate extends React.Component{\r\n//     constructor(props){\r\n//         super(props);\r\n//         this.myOnSubmit = this.myOnSubmit.bind(this)\r\n\r\n//     }\r\n\r\n//     toRender(FieldProps){ //Field would pass bunch of form-related props to its component's function.we use them ro make our elements controlled\r\n//         // console.log('props created by Fields: ',FieldProps)\r\n    \r\n//        return (<div >\r\n//             <label className='form-label' htmlFor={FieldProps.id}>{FieldProps.label}</label>\r\n//         <input className='form-control' type=\"text\" id={FieldProps.id} {...FieldProps.input} autoComplete='off'/>\r\n//         {FieldProps.meta.touched && FieldProps.meta.error?<div className='alert alert-danger' role=\"alert\">{FieldProps.meta.error}</div>:''}\r\n//         <br />\r\n//         </div>\r\n//         )\r\n//     }\r\n\r\n//     myOnSubmit(formValues){        //becuase we passed this function to handleSubmit;handleSubmit would do e.preventDefault() for us automatically\r\n//         // console.log(this.props) //and also there is no 'event'object in argument anymore; instead formValues is equalls to whatever we typed in input \r\n//         this.props.createStream(formValues)\r\n//     }\r\n\r\n    \r\n//     //handleSubmit is speacial prop function added by redux form\r\n//     render(){ //component attr in Field is either a react component or a function for Field to call.this func or comp needs to return some element to show on screen\r\n//         return <form onSubmit={this.props.handleSubmit(this.myOnSubmit)}> \r\n//             <Field name='title' component={this.toRender} label='Enter Title' id='field1'/> \r\n//             <Field name='description' component={this.toRender} label='Enter Description' id='field2'/> \r\n//             <button className='btn btn-primary btn-lg'>Submit</button>\r\n//         </form> \r\n//     }//whenever we pass a prop to Field component that its has no idea what to do with,it'll pass this to 'component' attr as props which itself is a funcction or component \r\n\r\n//     // componentDidMount(){\r\n//     //     console.log('props created by reduxForm: ',this.props)\r\n//     // }\r\n\r\n// }\r\n\r\n// /*what essentially happens with validating redux form is:it looks at errors obj keys,in this case 'title' and 'description' and add the \r\n// values of them to the respective Field with the same name;on 'FieldProps.meta.error'  */\r\n// function validate(formValues){\r\n//     const errors = {}; //this object will return as \"Fieldprops.meta.error\" name of this object has to be \"errors\".the important thing is the keys of object should be equal to Field names \r\n\r\n//     if(!formValues.title){\r\n//         errors.title = 'you must enter a title' \r\n//     }\r\n//     if(!formValues.description){\r\n//         errors.description = 'you must write some description'\r\n//     }\r\n//     return errors\r\n// }\r\n\r\n// //unlike connect() reduxForm takes only one argument(an object)\r\n// /*becuase reduxForm does all the bts work for us,after wiring it to your\r\n// component ,by default it will pass tremendous number of props*/\r\n// const formWrapped =  reduxForm({\r\n//     form:'streamCreate',\r\n//     validate:validate //this is how we wireup our validation .validate is speacial key.ALSO there is another way of validation which each Field has its own specific typeof validation this way called:Field-Level Validation  \r\n// })(streamCreate)\r\n\r\n// export default connect(null,{createStream})(formWrapped)\r\n\r\n\r\n\r\n\r\n//----------------------------AFTER REFACTORING FOR CODE RE-USE---------------------------\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createNote } from '../../actions';\r\nimport NoteForm from './NoteForm'\r\n\r\nclass NoteCreate extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.createOnSubmit = this.createOnSubmit.bind(this)\r\n\r\n    }\r\n\r\n    \r\n\r\n    createOnSubmit(formValues){        \r\n        \r\n        this.props.createNote(formValues)\r\n    }\r\n\r\n    \r\n    render(){ \r\n        return <NoteForm  onSubmit={this.createOnSubmit} />\r\n    }\r\n\r\n  \r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default connect(null,{createNote})(NoteCreate)","//-------------------PRE CODE REUSE------------------------\r\n\r\n// import React from 'react';\r\n// import {connect} from 'react-redux';\r\n// import { fetchnote , editnote } from '../../actions';\r\n\r\n// class noteEdit extends React.Component{\r\n\r\n//     componentDidMount(){\r\n//         this.props.fetchnote(this.props.match.params.id);\r\n//         console.log(this.props)\r\n//     }\r\n\r\n//     render(){\r\n//         return <div>note Edit</div>\r\n//     }\r\n// }\r\n\r\n// function mapStateToProps(state,ownProps){ \r\n//     /*this is one of the rare cases that part of our data is on state and another part in props\r\n//     and we need that part in props to access correctly that part in state\r\n//      */\r\n//     return {note:state.note[ownProps.match.params.id]}\r\n// }\r\n\r\n// export default connect(mapStateToProps,{fetchnote})(noteEdit);\r\n\r\n\r\n// -----------------AFTER CODE REUSE--------------------\r\n\r\n\r\nimport React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { fetchNote , editNote } from '../../actions';\r\nimport NoteForm from './NoteForm'\r\n\r\nclass NoteEdit extends React.Component{\r\n\r\n    componentDidMount(){\r\n        this.props.fetchNote(this.props.match.params.id)\r\n\r\n    }\r\n\r\n    editOnSubmit = (formValues)=>{\r\n        this.props.editNote(this.props.match.params.id,formValues)\r\n    }\r\n\r\n\r\n    \r\n\r\n    render(){\r\n        if(this.props.note){ //very IMPORTANT note: dont try use conditional for initial values.it wont work.we have to make our \r\n            //whole return statement to wait for fetchnote response and updating the props afterward.if you do something like this: initialValues = {{}?felan:null} wont work\r\n        // console.log('props: ',this.props)\r\n        return(\r\n        <>\r\n            <h3 className='container'>Edit Note</h3>\r\n            <NoteForm onSubmit={this.editOnSubmit} initialValues={{title:this.props.note.title,description:this.props.note.description}}/>\r\n        </>)\r\n    }\r\n    return <div>loading</div>}\r\n}\r\n\r\nfunction mapStateToProps(state,ownProps){ \r\n    // console.log('state: ',state)\r\n    /*this is one of the rare cases that part of our data is on state and another part in props\r\n    and we need that part in props to access correctly that part in state\r\n     */\r\n    return {note:state.note[ownProps.match.params.id]}\r\n}\r\n\r\nexport default connect(mapStateToProps,{fetchNote,editNote})(NoteEdit);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { useState } from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport history from '../history';\r\n\r\n\r\n\r\n/* important note on bootstrap modal:\r\n so i busted my ass off to find a way to trigerring modal on component load ,while using bootstrap cdn and\r\n traditional jsx and classes.but nothing worked out.so i had to install react-bootstrap via npm.but by the looks of it\r\n it does not offer those out of the box functionality like clicking outside of modal to be closed\r\n and we have to do it manually in component.\r\n by the way showing modal by default in react-bootstrap is as simple as show={true} attr in Modal component*/\r\nconst MyModal = (props)=>{\r\n\r\n    const [modalShow,setModalShow] = useState(true)\r\n \r\n    return ReactDOM.createPortal(\r\n        <div onClick={()=>history.push('/')}>\r\n        <Modal onClick={(e)=>e.stopPropagation()}show={true}>\r\n      <Modal.Header>{props.title}</Modal.Header>\r\n      <Modal.Body>{props.content}</Modal.Body>\r\n      <Modal.Footer>\r\n          <Link to='/' className='btn btn-secondary'>close</Link>\r\n          <button onClick={props.onDeleteClick} className='btn btn-danger'>delete!</button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n        </div>,document.getElementById('modal')\r\n    )\r\n\r\n}\r\n\r\nexport default MyModal","import React from 'react';\r\nimport MyModal from '../Modal';\r\nimport { useEffect } from 'react';\r\nimport { fetchNote , deleteNote } from '../../actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst NoteDelete= (props)=>{\r\n    useEffect(myFunc,[])\r\n    const {id} =props.match.params\r\n\r\n    function myFunc(){\r\n        props.fetchNote(id)\r\n    }\r\n\r\n\r\n    return <MyModal\r\n        title='Delete Note'\r\n        content={`do you want to delete Note with id ${id}`}\r\n        onDeleteClick={()=>props.deleteNote(id)}/>\r\n}\r\n\r\nexport default connect(null,{fetchNote,deleteNote})(NoteDelete)","import React from 'react';\r\nimport { fetchNotes } from '../../actions';\r\nimport { connect } from 'react-redux';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass NoteList extends React.Component{\r\n    componentDidMount(){\r\n        this.props.fetchNotes() //its really important that we call this action from props.not directly.becuase otherwise it wont dispatcch automatically by connect()\r\n    }\r\n\r\n    style = {\r\n        display:'flex',\r\n        flexDirection:'row',\r\n        justifyContent:'space-between'\r\n    }\r\n\r\n    \r\n    add3Dots(string, limit){\r\n        var dots = \" ...\";\r\n    if(string.length > limit)\r\n    {\r\n    string = string.substring(0,limit) + dots;\r\n    }\r\n\r\n    return string\r\n    }\r\n\r\n\r\n    renderedList(){\r\n      return  Object.values(this.props.notes).map((note)=>{\r\n            return(<div key={note.id}>\r\n                {note.userId === this.props.currentUserId && note.userId? //i puted &&note.userId cause in case of signed-out;both note.userId and props.currentUserId are undefined and === will returns true and render buttons on items with no userId!\r\n                <li className=\"list-group-item\"  style={this.style}>\r\n                    <div className='contents'>\r\n                        <h3><Link to={`todo/${note.id}`}>{note.title}</Link></h3>\r\n                        <p className='notes-desc'>{this.add3Dots(note.description,200)}</p>\r\n                        {note.description.length>200? <Link to={`todo/${note.id}`} >read more</Link>:null}\r\n                     </div>\r\n                            <div className='buttons'>\r\n                                <Link to={`/todo/edit/${note.id}`} className='btn btn-primary'>Edit</Link>\r\n                                <Link to={`/todo/delete/${note.id}`}  className='btn btn-danger'>Delete</Link>\r\n                            </div>\r\n                    </li>:null}</div>)\r\n        })\r\n    }\r\n\r\n    notSignedInMessage(){\r\n        return(\r\n        <div style={{textAlign:'center'}} >\r\n        <h1>welcome to my note application</h1>\r\n        <h3>you must sign in via your google account to be able to add and view your notes</h3>\r\n        </div>)\r\n    }\r\n\r\n    signedInButNoNotes(){\r\n        let notewithThisUSer = false\r\n        if(this.props.isSignedIn){\r\n            for(let i of Object.values(this.props.notes)){\r\n                if(i.userId === this.props.currentUserId){\r\n                   notewithThisUSer = true\r\n                }\r\n            }\r\n            if (!notewithThisUSer){\r\n                return <h3>not note has been added yet</h3>\r\n            }\r\n            \r\n        }\r\n        return null\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className='container'>\r\n                <h1>Notes:</h1>\r\n                <ul className=\"list-group\">\r\n                    {!this.props.isSignedIn? this.notSignedInMessage():null}\r\n                    {this.signedInButNoNotes()}\r\n                    {this.renderedList()}\r\n                </ul>\r\n                <br />\r\n                {this.props.isSignedIn ? <Link to='/todo/new' className='btn btn-primary btn-lg' style={{float:'right'}}>Create Note</Link>:null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n// console.log('state: ',state)\r\nreturn {\r\n    notes:state.note,\r\n    currentUserId:state.auth.userId,\r\n    isSignedIn:state.auth.isSignedIn //we could use userId instead of isSignedIn because when user is not signed in,the userId is undefined but isSignedIn is more declarative and its sole purpose is to define the user is signed in or not.so we use that\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,{fetchNotes})(NoteList)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport { fetchNote } from '../../actions';\r\n\r\nconst NoteShow = (props)=>{\r\n\r\n    const {id} = props.match.params\r\n\r\n    useEffect(()=>props.fetchNote(id),[])\r\n\r\n    function renderedContent(){\r\n        if(props.note){\r\n            return <div className='container card'>\r\n                        <h2 className='card-title'>Title : {props.note.title}</h2>\r\n                        <p className='card-text'>Content : {props.note.description}</p>\r\n                    </div>\r\n        }else return null\r\n    }\r\n    \r\n    return renderedContent()\r\n    \r\n};\r\n\r\nfunction mapStateToProps(state,ownProps){\r\n    console.log(state)\r\n    return {note:state.note[ownProps.match.params.id]}\r\n}\r\n\r\nexport default connect(mapStateToProps,{fetchNote})(NoteShow)","import React from 'react';\r\nimport {FaGoogle} from 'react-icons/fa';\r\nimport {connect} from 'react-redux';\r\nimport { signIn,signOut } from '../actions';\r\n\r\nclass GoogleAuth extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.onsignInClick = this.onsignInClick.bind(this);\r\n        this.onsignOutClick = this.onsignOutClick.bind(this); //binds should come in constructor\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        // console.log('props: ',this.props)\r\n        window.gapi.load('client:auth2',()=>{\r\n           window.gapi.client.init({\r\n                clientId:'410916988914-l2sseql9jsjkv4nvleauphg9vfprcigu.apps.googleusercontent.com',\r\n                scope:'email'\r\n            }).then(()=>{\r\n                this.auth = window.gapi.auth2.getAuthInstance();\r\n                this.onAuthChange(this.auth.isSignedIn.get());\r\n                this.auth.isSignedIn.listen(this.onAuthChange) //by default the function inside listen method will get a boolean argument\r\n                                                                //which tells the current status of signing(true or false).so we dont actually need to\r\n            })                                                  //reach in to this.auth.isSignedIn.get() for getting that \r\n        })\r\n\r\n    }\r\n\r\n    onAuthChange = (isSignedIn)=>{//since we are going to use this as a callback in another function its better to use arrow functions or 'this' will screw us\r\n        if(isSignedIn){\r\n            this.props.signIn(this.auth.currentUser.get().getId())\r\n        }else{\r\n            this.props.signOut()\r\n        }\r\n    }\r\n\r\n    thingsToRender(){ //you see to define a regular function in a class you dont need a 'function' keyword\r\n        if(this.props.isSignedIn===true){\r\n            return <button className=\"btn btn-danger\" onClick={this.onsignInClick}>sign out <FaGoogle/></button>\r\n        }else if(this.props.isSignedIn===false){\r\n            return <button className=\"btn btn-danger\" onClick={this.onsignOutClick}>please sign in <FaGoogle/></button>\r\n        }else return null\r\n    }\r\n\r\n    \r\n\r\n    onsignInClick(){\r\n        this.auth.signOut()\r\n\r\n    }\r\n    onsignOutClick(){\r\n        this.auth.signIn()\r\n\r\n    }\r\n\r\n\r\n    render(){\r\n        return <> {this.thingsToRender()}</>\r\n                \r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    // console.log(state)\r\n    return{isSignedIn:state.auth.isSignedIn}\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,{signIn,signOut})(GoogleAuth)","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport GoogleAuth from './GoogleAuth';\r\n\r\nconst Header = ()=>{\r\n    return <nav className=\"navbar navbar-expand-lg navbar-light\">\r\n    <div className=\"container\">\r\n        <Link to='/' className=\"navbar-brand btn\">Note App</Link>\r\n        <Link to='/' className=\"navbar-brand ms-auto\">All Notes</Link> {/*in bootstrap 5 left and right changed to start and end so ml=>ms & mr=>me */}  \r\n        <Link to='/'><GoogleAuth></GoogleAuth></Link>\r\n      \r\n    </div>\r\n  </nav>\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport { BrowserRouter , Route ,Router ,Switch} from 'react-router-dom'; //BrowserRouter is mostly for Before creating our custom history objects and has no use anymore\r\nimport streamCreate from './todos/NoteCreate';\r\nimport streamEdit from './todos/NoteEdit';\r\nimport StreamDelete from './todos/NoteDelete';\r\nimport streamList from './todos/NoteList';\r\nimport streamShow from './todos/NoteShow';\r\nimport Header from './Header';\r\nimport history from '../history';\r\n\r\n\r\n\r\n//to be honest we are tricking users by react router.with this kind of navigation we are actually showing and hiding \r\n// diffrent components\r\n\r\n/*using <a href='route'></a> tag is a bad aproach for navigating through routes\r\nbecuase with anchor tag browser will dump old html and all states  */\r\n\r\nconst App = ()=>{\r\n    return <div className='app'>\r\n        \r\n        <Router history={history}>\r\n            <Header/>\r\n            <Switch>\r\n                <Route path='/' exact component={streamList}/>  {/*becuase in above ;we pass these components,each component has some default props provided by reacr router;like:history,location,match.. */}\r\n                <Route path='/todo/new'  component={streamCreate}/>\r\n                <Route path='/todo/edit/:id'  component={streamEdit}/>{/*special charachter is \":\" and we could say anything instead of id .whatever we say will be the key of the match params in props for that component*/}\r\n                <Route path='/todo/delete/:id'  component={StreamDelete}/>\r\n                <Route path='/todo/:id'  component={streamShow}/>\r\n            </Switch>\r\n        </Router>\r\n    </div>\r\n};\r\n\r\nexport default App;","import { Switch } from \"react-router-dom\";\r\nimport { combineReducers } from \"redux\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport _  from 'lodash';\r\n\r\n\r\nconst INITIAL_STATE = {\r\n    isSignedIn:null,\r\n    userId:null\r\n}\r\n\r\nfunction authReducer(state=INITIAL_STATE,action){\r\n    switch(action.type){\r\n        case 'SIGN_IN':\r\n            return {...state,isSignedIn:true,userId:action.payload};\r\n        \r\n        case'SIGN_OUT':\r\n            return {...state,isSignedIn:false,userId:action.payload};\r\n        \r\n        default:return state\r\n    }\r\n}\r\n\r\n\r\nfunction noteReducer(state={},action){\r\n    switch(action.type){\r\n        case 'EDIT-NOTE':\r\n            return {...state ,[action.payload.id]:action.payload} //this is called key interpolation\r\n        case'CREATE_NOTE':\r\n            return {...state , [action.payload.id]:action.payload}\r\n        case 'FETCH_NOTE':\r\n            return {...state , [action.payload.id]:action.payload}\r\n        case 'FETCH_NOTES':\r\n            return {...state , ..._.mapKeys(action.payload,'id')}\r\n        case 'DELETE_NOTE':\r\n            return _.omit(state,action.payload);//becuase payload is the id itself(look at actions) we dont have to say payload.id\r\n            //also omit does not change previous object.it returns a new one\r\n        default:\r\n            return state\r\n        }\r\n\r\n}\r\n\r\n/*\r\n//let see how array baseed approach would be(just for 'EDIT_STREAM'case)\r\n\r\nfunction streamReducer(state=[],action){\r\n    switch(action.type){\r\n        case 'EDIT_STREAM':\r\n            return state.map(stream=>{\r\n                if(stream.id===action.payload.id){\r\n                    return action.payload\r\n                }else return stream\r\n            })\r\n    }\r\n    default:\r\n        return state\r\n}\r\n*/\r\n\r\nexport default combineReducers({\r\n    auth:authReducer,\r\n    form:formReducer,\r\n    note:noteReducer\r\n})\r\n\r\n","import React from 'react';\r\nimport reactDom from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore , applyMiddleware , compose} from 'redux';\r\nimport App from './components/App';\r\nimport reducers from './reducers';\r\nimport reduxThunk from 'redux-thunk';\r\nimport '../src/styles/style.css';\r\n\r\n//for redux dev tools\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers,composeEnhancers(applyMiddleware(reduxThunk)))\r\nreactDom.render(\r\n    <Provider store = {store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}